<!-- Player Browse Teams Page -->
<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <h2 class="mb-0"><i class="fas fa-users-viewfinder me-2"></i> Browse Teams</h2>
                    <p class="lead mt-2 mb-0">
                        Discover teams you can join and connect with players who share your passion for sports.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3 mb-md-0">
                            <label for="teamSearch" class="form-label">Search Teams</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" id="teamSearch" class="form-control" placeholder="Search by team name, sport, or description...">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="sportFilter" class="form-label">Filter by Sport</label>
                            <select class="form-select" id="sportFilter">
                                <option value="">All Sports</option>
                                <option value="Basketball">Basketball</option>
                                <option value="Football">Football</option>
                                <option value="Cricket">Cricket</option>
                                <option value="Tennis">Tennis</option>
                                <option value="Swimming">Swimming</option>
                                <option value="Volleyball">Volleyball</option>
                                <option value="Badminton">Badminton</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Error/Success Messages -->
    <% if (messages.error) { %>
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-circle me-2"></i> <%= messages.error %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <% } %>
    
    <% if (messages.success) { %>
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i> <%= messages.success %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    <% } %>

    <!-- Teams Grid -->
    <div class="row" id="teams-container">
        <% if (availableTeams && availableTeams.length > 0) { %>
            <% availableTeams.forEach(team => { %>
                <div class="col-md-6 col-lg-4 mb-4 team-card" data-sport="<%= team.sport_type %>">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="mb-0"><%= team.name %></h5>
                            <span class="badge bg-primary"><%= team.sport_type %></span>
                        </div>
                        <div class="card-body">
                            <p><%= team.description || 'No description available' %></p>
                            <div class="mb-3">
                                <strong>Manager:</strong> <%= team.manager_name %>
                                <a href="mailto:<%= team.manager_email %>" class="ms-2"><i class="fas fa-envelope"></i></a>
                            </div>
                            <% 
                                // Calculate percentage for progress bar
                                var percentage = Math.min(100, (team.current_members / team.max_members) * 100);
                            %>
                            <div class="progress mb-3" style="height: 25px;">
                                    <div class="progress-bar" role="progressbar" 
                                        data-width="<%= percentage %>"
                                        aria-valuenow="<%= team.current_members %>" 
                                    aria-valuemin="0" 
                                    aria-valuemax="<%= team.max_members %>">
                                    <%= team.current_members %> / <%= team.max_members %> Members
                                </div>
                            </div>
                        </div>
                        <div class="card-footer d-grid">
                            <% if (team.already_joined) { %>
                                <button class="btn btn-success" disabled>
                                    <i class="fas fa-check-circle me-2"></i> Already a Member
                                </button>
                            <% } else if (requestStatusMap && requestStatusMap[team.id]) { %>
                                <% if (requestStatusMap[team.id] === 'pending') { %>
                                    <button class="btn btn-warning" disabled>
                                        <i class="fas fa-clock me-2"></i> Request Pending
                                    </button>
                                <% } else if (requestStatusMap[team.id] === 'approved') { %>
                                    <button class="btn btn-success" disabled>
                                        <i class="fas fa-check me-2"></i> Request Approved
                                    </button>
                                <% } else if (requestStatusMap[team.id] === 'rejected') { %>
                                    <button class="btn btn-danger" disabled>
                                        <i class="fas fa-times me-2"></i> Request Rejected
                                    </button>
                                <% } %>
                            <% } else { %>
                                <button type="button" class="btn btn-primary" 
                                    data-team-action="join" 
                                    data-team-id="<%= team.id %>"
                                    data-team-name="<%= team.name %>">
                                    <i class="fas fa-user-plus me-2"></i> Request to Join
                                </button>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }); %>
        <% } else { %>
            <div class="col-12">
                <div class="alert alert-info text-center" role="alert">
                    <i class="fas fa-info-circle me-2"></i> No available teams found. Check back later for new teams to join!
                </div>
            </div>
        <% } %>
        
        <!-- No results message (initially hidden) -->
        <div id="noResults" class="col-12 d-none">
            <div class="alert alert-warning text-center" role="alert">
                <i class="fas fa-search me-2"></i> No teams match your search. Try different search terms or filters.
            </div>
        </div>
    </div>
</div>

<script>
// Client-side filtering
document.addEventListener('DOMContentLoaded', function() {
    const teamSearch = document.getElementById('teamSearch');
    const sportFilter = document.getElementById('sportFilter');
    const teamsContainer = document.getElementById('teamsContainer');
    const teamCards = document.querySelectorAll('.team-card');
    const noResults = document.getElementById('noResults');
    
    function filterTeams() {
        const searchTerm = teamSearch.value.toLowerCase();
        const sportTerm = sportFilter.value;
        
        let visibleCount = 0;
        
        teamCards.forEach(card => {
            const teamName = card.querySelector('.card-header h5').textContent.toLowerCase();
            const teamSport = card.getAttribute('data-sport');
            
            const matchesSearch = teamName.includes(searchTerm);
            const matchesSport = sportTerm === '' || teamSport === sportTerm;
            
            if (matchesSearch && matchesSport) {
                card.classList.remove('d-none');
                visibleCount++;
            } else {
                card.classList.add('d-none');
            }
        });
        
        // Show/hide no results message
        if (visibleCount === 0 && teamCards.length > 0) {
            noResults.classList.remove('d-none');
        } else {
            noResults.classList.add('d-none');
        }
    }
    
    // AJAX Team Search with real-time filtering
    let searchTimeout;
    
    function performAjaxSearch() {
        const searchTerm = teamSearch.value.trim();
        const sportTerm = sportFilter.value;
        
        // If no search terms, show default teams
        if (!searchTerm && !sportTerm) {
            filterTeams(); // Use existing local filter
            return;
        }
        
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            // Show loading state
            const teamsContainer = document.getElementById('teams-container');
            const originalContent = teamsContainer.innerHTML;
            
            teamsContainer.innerHTML = `
                <div class="col-12 text-center">
                    <div class="spinner-border text-info" role="status">
                        <span class="visually-hidden">Searching teams...</span>
                    </div>
                    <p class="mt-2">Searching teams...</p>
                </div>
            `;
            
            // Build search parameters
            const searchParams = new URLSearchParams();
            if (searchTerm) searchParams.append('search', searchTerm);
            if (sportTerm) searchParams.append('sport', sportTerm);
            
            // AJAX request for team search
            fetch(`/player/api/teams/search?${searchParams.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displaySearchResults(data.teams);
                    } else {
                        teamsContainer.innerHTML = originalContent;
                        showSearchError(data.message || 'Search failed');
                    }
                })
                .catch(error => {
                    console.error('Team search error:', error);
                    teamsContainer.innerHTML = originalContent;
                    showSearchError('Failed to search teams');
                });
        }, 500);
    }
    
    function displaySearchResults(teams) {
        const teamsContainer = document.getElementById('teams-container');
        
        if (teams.length === 0) {
            teamsContainer.innerHTML = `
                <div class="col-12 text-center">
                    <i class="fas fa-users-slash fa-3x text-muted mb-3"></i>
                    <h5>No teams found</h5>
                    <p class="text-muted">Try different search terms or browse all teams</p>
                </div>
            `;
            return;
        }
        
        teamsContainer.innerHTML = teams.map(team => createTeamCard(team)).join('');
    }
    
    function createTeamCard(team) {
        const managerName = team.manager_id ? `${team.manager_id.first_name} ${team.manager_id.last_name}` : 'Unknown';
        const memberCount = team.members ? team.members.length : 0;
        
        return `
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 team-card" data-team-name="${team.name.toLowerCase()}" data-team-sport="${team.sport_type}">
                    <div class="card-header bg-info text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">${team.name}</h5>
                            <span class="badge bg-light text-dark">${team.sport_type}</span>
                        </div>
                    </div>
                    <div class="card-body">
                        <p class="card-text">${team.description || 'No description available'}</p>
                        <ul class="list-unstyled">
                            <li><i class="fas fa-user-tie text-primary me-2"></i> Manager: ${managerName}</li>
                            <li><i class="fas fa-users text-primary me-2"></i> Members: ${memberCount}/${team.max_members || 'N/A'}</li>
                            <li><i class="fas fa-map-marker-alt text-primary me-2"></i> Location: ${team.location || 'Not specified'}</li>
                        </ul>
                    </div>
                    <div class="card-footer">
                        <form action="/player/request-join-team/${team._id}" method="POST" class="team-join-form" data-team-id="${team._id}">
                            <button type="submit" class="btn btn-info w-100 join-team-btn" ${memberCount >= team.max_members ? 'disabled' : ''}>
                                <i class="fas fa-user-plus me-2"></i>
                                ${memberCount >= team.max_members ? 'Team Full' : 'Request to Join'}
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        `;
    }
    
    function showSearchError(message) {
        const teamsContainer = document.getElementById('teams-container');
        teamsContainer.innerHTML = `
            <div class="col-12">
                <div class="alert alert-warning" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i> ${message}
                </div>
            </div>
        `;
    }
    
    // Enhanced event listeners
    teamSearch.addEventListener('input', function() {
        if (this.value.length >= 2 || sportFilter.value) {
            performAjaxSearch();
        } else if (this.value.length === 0 && !sportFilter.value) {
            filterTeams(); // Fall back to local filtering
        }
    });
    
    sportFilter.addEventListener('change', function() {
        if (teamSearch.value.length >= 2 || this.value) {
            performAjaxSearch();
        } else {
            filterTeams(); // Fall back to local filtering
        }
    });
    
    // AJAX Team Join Functionality
    document.addEventListener('click', function(e) {
        // Handle dynamically created join buttons
        if (e.target.classList.contains('join-team-btn') || e.target.closest('.join-team-btn')) {
            e.preventDefault();
            
            const button = e.target.classList.contains('join-team-btn') ? e.target : e.target.closest('.join-team-btn');
            const form = button.closest('.team-join-form');
            const teamId = form.dataset.teamId;
            
            if (!teamId) {
                alert('Team ID not found. Please refresh the page and try again.');
                return;
            }
            
            joinTeamViaAjax(button, teamId);
        }
        
        // Handle server-rendered join buttons
        if (e.target.dataset.teamAction === 'join' || e.target.closest('[data-team-action="join"]')) {
            e.preventDefault();
            
            const button = e.target.dataset.teamAction === 'join' ? e.target : e.target.closest('[data-team-action="join"]');
            const teamId = button.dataset.teamId;
            
            if (!teamId) {
                alert('Team ID not found. Please refresh the page and try again.');
                return;
            }
            
            joinTeamViaAjax(button, teamId);
        }
    });
    
    function joinTeamViaAjax(button, teamId) {
        // Show loading state
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Sending Request...';
        button.disabled = true;
        
        // Send AJAX request
        fetch(`/api/teams/${teamId}/join`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({})
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                button.innerHTML = '<i class="fas fa-check me-2"></i>Request Sent';
                button.classList.remove('btn-info', 'btn-primary');
                button.classList.add('btn-success');
                
                // Show success message
                showTeamMessage(data.message, 'success');
            } else {
                // Restore button
                button.innerHTML = originalText;
                button.disabled = false;
                
                // Show error message
                showTeamMessage(data.message || 'Failed to send join request', 'error');
            }
        })
        .catch(error => {
            console.error('Error joining team:', error);
            
            // Restore button
            button.innerHTML = originalText;
            button.disabled = false;
            
            showTeamMessage('Failed to send join request. Please try again.', 'error');
        });
    }
    
    function showTeamMessage(message, type) {
        // Remove existing messages
        const existingMessage = document.querySelector('.team-message');
        if (existingMessage) {
            existingMessage.remove();
        }
        
        // Create new message
        const messageDiv = document.createElement('div');
        messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show team-message`;
        messageDiv.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        // Insert after search section
        const searchCard = document.querySelector('.card');
        searchCard.parentNode.insertBefore(messageDiv, searchCard.nextSibling);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.remove();
            }
        }, 5000);
    }
}); 